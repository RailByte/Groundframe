<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="simsig_USp_UPSERT_TSIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_UPSERT_TSIM
DECLARE @id AS SMALLINT
DECLARE @name AS NVARCHAR (128)
DECLARE @description AS NVARCHAR (2048)
DECLARE @simsig_wiki_link AS NVARCHAR (512)
DECLARE @simsig_code AS NVARCHAR (32)
DECLARE @datetime AS DATETIMEOFFSET (7)
DECLARE @debug AS BIT
DECLARE @debug_session_id AS UNIQUEIDENTIFIER;
DECLARE @error_message NVARCHAR(256);

--Check proc errors if user not logged in

SET @id = 0;
SET @name = 'Test Name';SET @description = 'Test Description';
SET @simsig_wiki_link = 'Test Wiki Link';
SET @simsig_code = 'Test SimSig Code';
SET @datetime = NULL;
SET @debug = 0;
SET @debug_session_id = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log Editor User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Check 2 - Ensure missing @name raises error (&lt;NULL&gt;)

SET @name = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT 
	[error_message] = @error_message;

--Check 3 - Ensure @name raises error (empty string)

SET @name = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT 
	[error_message] = @error_message;

--Check 4 - Ensure @simsig_code raises error (&lt;NULL&gt;)

SET @name = 'Test Name';
SET @simsig_code = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4

SELECT 
	[error_message] = @error_message;

--Check 5 - Ensure @simsig_code raises error (Empty String)

SET @simsig_code = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 5

SELECT 
	[error_message] = @error_message;

--Check 6 - Ensure check record created correctly

SET @simsig_code = 'Test SimSig Code';

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 6

SELECT 
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[modifiedby_id],
	[testdata_id]
FROM [simsig].[TSIM]
WHERE
	[id] = @id

--Check 7 Ensure Default Era Created

--Result Set 7

SELECT
	[id],
	[sim_id],
	[name],
	[description],
	[era_type_id]
FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

--Check 8 - Ensure passing name that already exists that a new record isn't created

DECLARE @created_id SMALLINT = @id;

SET @id = 0;
SET @description = 'Test Description 1';
SET @simsig_wiki_link = 'Test Wiki Link 1';
SET @simsig_code = 'Test SimSig Code 1';

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 8

SELECT 
	[id] = CAST(CASE WHEN [id] = @created_id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = [createdon] THEN 0 ELSE 1 END AS BIT)
FROM [simsig].[TSIM]
WHERE
	[name] = @name;

--Check 9 - Ensure passing id that already exists that a new record isn't created

SET @name = 'Test Name 2';
SET @description = 'Test Description 2';
SET @simsig_wiki_link = 'Test Wiki Link 2';
SET @simsig_code = 'Test SimSig Code 2';

EXEC [simsig].[USp_UPSERT_TSIM] @created_id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 9

SELECT 
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = [createdon] THEN 0 ELSE 1 END AS BIT),
	[modifiedby_id]
FROM [simsig].[TSIM]
WHERE
	[id] = @id

--Check 10 - Check only 1 record created at this stage

--Result Set 10

SELECT
	[id]
FROM [simsig].[TSIM]

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

DELETE FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check 11 - Check debug works correctly and a custom date is specified correctly

SET @id = 0
SET @name = 'Test Name 2';
SET @description = 'Test Description 2';
SET @simsig_wiki_link = 'Test Wiki Link 2';
SET @simsig_code = 'Test SimSig Code 2';
SET @debug = 1
SET @datetime = TODATETIMEOFFSET(GETUTCDATE(), '-07:00');

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 11

SELECT 
	[id] = CAST(CASE WHEN [id] != @created_id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] = @datetime THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = @datetime THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id]
FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Result Set 12

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

DELETE FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check 12 - Check debug works correctly when a specific debug session guid is passed

SET @id = 0
SET @name = 'Test Name 3';
SET @description = 'Test Description 3';
SET @simsig_wiki_link = 'Test Wiki Link 3';
SET @simsig_code = 'Test SimSig Code 3';
SET @debug = 1
SET @datetime = TODATETIMEOFFSET(GETUTCDATE(), '-08:00');
SET @debug_session_id = NEWID();
DECLARE @expected_debug_session_id UNIQUEIDENTIFIER = @debug_session_id;

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 13

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @expected_debug_session_id;

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

DELETE FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check TestData ID gets added if passed in the session context

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TSIMTest', @testdata_id = @testdata_id OUTPUT;
EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SET @id = 0
SET @name = 'Test Name 4';
SET @description = 'Test Description 4';
SET @simsig_wiki_link = 'Test Wiki Link 4';
SET @simsig_code = 'Test SimSig Code 4';
SET @debug = 1
SET @datetime = NULL;
SET @debug_session_id = NEWID();

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 14

SELECT 
	[testdata_id_check] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check a standard doesn't have permission

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 15

SELECT 
	[error_message] = @error_message;

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_UPSERT_TSIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TSIMTest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_GET_TSIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TSIM
DECLARE @id AS SMALLINT;
DECLARE @debug AS BIT = 0;
DECLARE @debug_session_id AS UNIQUEIDENTIFIER = NULL;
DECLARE @inserted_record1_id AS SMALLINT; --The ID of the first inserted record
DECLARE @created_datetime DATETIMEOFFSET = SYSDATETIMEOFFSET();
DECLARE @error_message NVARCHAR(256);
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TSIMTest', @testdata_id = @testdata_id OUTPUT;

--Set up data

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test Get Sim Name 1',
	'Test Get Sim Description 1',
	'Test Get Sim Code 1',
	'Test Get Sim Wiki Link 1',
	2,
	@created_datetime,
	2,
	@created_datetime,
	@testdata_id
)

SET @inserted_record1_id = CAST(SCOPE_IDENTITY() AS INT);
SET @created_datetime = SYSDATETIMEOFFSET();

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test Get Sim Name 2',
	'Test Get Sim Description 2',
	'Test Get Sim Code 2',
	'Test Get Sim Wiki Link 2',
	2,
	@created_datetime,
	2,
	@created_datetime,
	@testdata_id
);

--Check 1 Ensure Errors as user not logged int

BEGIN TRY
	EXEC [simsig].[USp_GET_TSIM] @id = @inserted_record1_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Check 2 the first record is returned when ID is passed

--Result Set 2
EXEC [simsig].[USp_GET_TSIM] @id = @inserted_record1_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;


--Check 3 ensure all records are returned

--Result Set 3
EXEC [simsig].[USp_GET_TSIM] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check 4 ensure debug enters event records

SET @debug = 1
EXEC [simsig].[USp_GET_TSIM] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 5
SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Check 5 ensure debug enters event records for the correct @debug_session_id

SET @debug_session_id = NEWID();
DECLARE @expected_debug_session_id UNIQUEIDENTIFIER = @debug_session_id;

EXEC [simsig].[USp_GET_TSIM] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 7

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @expected_debug_session_id;</value>
  </data>
  <data name="simsig_USp_GET_TSIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TSIMTest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_DELETE_TSIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.Usp_DELETE_TSIM
DECLARE @id AS INT;

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon]
)
VALUES
(
	N'Test Delete Name 1',
	N'Test Delete Desc 1',
	N'Test Delete Code 1',
	N'Test Delete Wiki Line 1',
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET()
);

SET @id = (SELECT CAST(SCOPE_IDENTITY() AS INT));

INSERT INTO [simsig].[TSIMERA]
(
	[sim_id],
	[name],
	[description],
	[era_type_id]
)
VALUES
(
	@id,
	N'Test Delete Era Name 1',
	N'Test Delete Era Desc 1',
	2
)

--Result 1 Check Sim was created
SELECT * FROM [simsig].[TSIM] WHERE [id] = @id;
--Result 2 Check Smim Era was created
SELECT * FROM [simsig].[TSIMERA] WHERE [sim_id] = @id;

--Check not being logged in raises error

DECLARE @error_message NVARCHAR(256);

BEGIN TRY
	EXEC [simsig].[Usp_DELETE_TSIM] @id = @id;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3
SELECT
	[error_message] = @error_message;

--Check a standard doesn't have permission

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC  [simsig].[Usp_DELETE_TSIM] @id = @id;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4
SELECT
	[error_message] = @error_message;
		
--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Delete Sim
EXEC  [simsig].[Usp_DELETE_TSIM] @id = @id;

--Result 5 Check Sim was deleted
SELECT * FROM [simsig].[TSIM] WHERE [id] = @id;
--Result 6 Check Smim Era was deleted
SELECT * FROM [simsig].[TSIMERA] WHERE [sim_id] = @id;
</value>
  </data>
  <data name="simsig_Usp_GET_TSIMERA_BY_SIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.Usp_GET_TSIMERA_BY_SIM
DECLARE @id AS SMALLINT
DECLARE @name AS NVARCHAR (128)
DECLARE @description AS NVARCHAR (2048)
DECLARE @simsig_wiki_link AS NVARCHAR (512)
DECLARE @simsig_code AS NVARCHAR (32)
DECLARE @datetime AS DATETIMEOFFSET (7)
DECLARE @debug AS BIT
DECLARE @debug_session_id AS UNIQUEIDENTIFIER;
DECLARE @error_message NVARCHAR(256);
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TSIMERA_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

--Check proc errors if user not logged in

SET @id = 0;
SET @name = 'Test Get SimEra By Sim Name';
SET @description = 'Test Get SimEra By Sim Description';
SET @simsig_wiki_link = 'Test Get SimEra By Sim Wiki Link';
SET @simsig_code = 'Test Get SimEra By Sim SimSig Code';
SET @datetime = NULL;
SET @debug = 0;
SET @debug_session_id = NULL;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id;

--Create Sim

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Check Proc Returns 1 Row

--Result Set 1

EXEC [simsig].[Usp_GET_TSIMERA_BY_SIM] @sim_id = @id;

--Check if user isn't logged in an error is raised

--Log User Out

EXEC [common].[Usp_CLEAR_SESSIONCONTEXT];

BEGIN TRY
	EXEC [simsig].[Usp_GET_TSIMERA_BY_SIM] @sim_id = @id;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT [error_message] = @error_message;</value>
  </data>
  <data name="simsig_Usp_UPSERT_TSIMERATest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.Usp_UPSERT_TSIMERA

--Arguements for Proc
DECLARE @id AS SMALLINT, @sim_id AS SMALLINT, @name AS NVARCHAR (128), @description AS NVARCHAR (2048), @era_type_id AS TINYINT, @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Create a TestData ID
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_UPSERT_TSIMERATest', @testdata_id = @testdata_id OUTPUT;

--Other Variables
DECLARE @error_message NVARCHAR(258);

--First create a simsig.TSIM record to attach the simulation era against

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test SimEra Sim Name',
	'Test SimEra Sim Description',
	'Test SimEra Sim Wiki Link',
	'Test SimEra Sim SimSig Code',
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET(),
	@testdata_id
)

SET @id = 0;
SET @sim_id = CAST(SCOPE_IDENTITY() AS SMALLINT);
SET @name = 'Test SimEra Name';
SET @description = 'Test SimEra Description';
SET @era_type_id = 1;
SET @debug = 0;

--Check Error raised if user not logged in

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY';

--Check Error raised if no name passed

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = NULL, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT 
	[error_message] = @error_message;

--Check Error raised if invalid Sim ID passed

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = -1, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT 
	[error_message] = @error_message;

--Check Error raised if invalid era type passed

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = 255, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4

SELECT 
	[error_message] = @error_message;

--Check Insertion happens correctly

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 5

SELECT
	[sim_id_check] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[era_type_id],
	[testdata_id]
FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Check Trying to insert a new era with an existing name updates the existing record

DECLARE @existing_id SMALLINT = @id;

SET @id = 0;

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 6

SELECT
	check_same_id = CAST(CASE WHEN @existing_id = @id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[era_type_id],
	[testdata_id]
FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Check changing description and era type updates record

SET @name = N'Updated Name';
SET @description = N'Updated Description';
SET @era_type_id = 2;


EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result 7

SELECT
	check_same_id = CAST(CASE WHEN @existing_id = @id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[era_type_id],
	[testdata_id]
FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Delete the SimEra

DELETE FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Check Debug works ok

SET @id = 0;
SET @name = 'Test SimEra Name 2';
SET @description = 'Test SimEra Description 2';
SET @era_type_id = 1;
SET @debug = 1;

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 8

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Delete Sim Era

DELETE FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Test TestData get's written correctly

SET @id = 0;
SET @name = 'Test SimEra Name 3';
SET @description = 'Test SimEra Description 3';
SET @era_type_id = 1;
SET @debug = 1;

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 9

SELECT 
	[id]
FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id

--Check a standard doesn't have permission

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH;

--Result Set 10

SELECT
	[error_message] = @error_message;</value>
  </data>
  <data name="simsig_USp_UPSERT_TVERSIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>eXEC common.Usp_CLEAR_SESSIONCONTEXT;

-- database unit test for simsig.USp_UPSERT_TVERSION
DECLARE	@id AS SMALLINT, 
		@name AS NVARCHAR (128),
		@description AS NVARCHAR (2048),
		@version AS NUMERIC (4, 1),
		@version_status_id AS TINYINT,
		@debug AS BIT, 
		@debug_session_id AS UNIQUEIDENTIFIER;

SELECT @name = 'Test Version 1 Name',
       @description = 'Test Version 1 Description',
       @version = 1.0,
       @version_status_id = 2,
       @debug = 0;

	--TestData ID

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;

--Other Variables

DECLARE @error_message NVARCHAR(248);

--Check User is logged in

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1 

SELECT 
	[error_message] = @error_message;

--Test Editor is denied access

SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2 

SELECT 
	[error_message] = @error_message;

--Test Standard is denied access

SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY', @testdata_id = @testdata_id

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT 
	[error_message] = @error_message;

--Test Admin user works ok

SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 4

SELECT 
	[id] = CAST(CASE WHEN [id] = @id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[simsig_version_from],
	[simsig_version_to],
	[version_status_id],
	[testdata_id]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Delete Version

DELETE FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Set Variables
SET @id = 0; --Reset ID;
SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 5

SELECT 
	[id]
	[name],
	[description],
	[simsig_version_from],
	[simsig_version_to],
	[version_status_id],
	[testdata_id]
FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;

--Test Updating Status and Name and Description

SET @name = 'Test Version 2 Name'
SET @description = 'Test Version 2 Description'
SET @version_status_id = 1;
SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 6

SELECT 
	[name],
	[description],
	[simsig_version_from],
	[simsig_version_to],
	[version_status_id]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Check trying to update version doesn't result in update

SET @version = 2.0
SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 7

SELECT 
	[simsig_version_from],
	[simsig_version_to]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Check Adding a new verions updates previous record and inserts new record correctly

DECLARE @previous_id SMALLINT = @id;
SET @name = 'Test Version 3 Name'
SET @description = 'Test Version 3 Description'
SET @version_status_id = 2;
SET @version = 2.0
SET @error_message = N'No Error Thrown';
SET @id = 0;

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 8

SELECT 
	[simsig_version_from],
	[simsig_version_to]
FROM [simsig].[TVERSION]
WHERE
	[id] = @previous_id;

--Result Set 9

SELECT 
	[simsig_version_from],
	[simsig_version_to]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Check Debug

SET @debug = 1
SET @name = 'Test Version 4 Name'
SET @description = 'Test Version 4 Description'
SET @version_status_id = 2;
SET @version = 3.0
SET @error_message = N'No Error Thrown';
SET @id = 0;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result 10

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id;

--Check Error thrown if current version is being split

SET @debug = 1
SET @name = 'Test Version 5 Name'
SET @description = 'Test Version 5 Description'
SET @version_status_id = 2;
SET @version = 3.0
SET @error_message = N'No Error Thrown';
SET @id = 0;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 11

SELECT 
	[error_message] = @error_message;
</value>
  </data>
  <data name="simsig_USp_UPSERT_TVERSIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;
DELETE FROM [simsig].[TVERSION] WHERE [testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_GET_TSIMERA_BY_SIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TSIMERA_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_UPSERT_TSIMERATest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_UPSERT_TSIMERATest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_GET_TVERSIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TVERSION
DECLARE @id1 AS SMALLINT, @id2 AS SMALLINT, @debug AS BIT = NULL, @debug_session_id AS UNIQUEIDENTIFIER = NULL, @testdata_id UNIQUEIDENTIFIER;

-- Get TestData ID;

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;

--Create some test data

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	1.0,
	1.9,
	N'Test Get Version Name 1',
	N'Test Get Version Desc 1',
	1,
	@testdata_id
)

SELECT @id1 = CAST(SCOPE_IDENTITY() AS INT);

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	2.0,
	NULL,
	N'Test Get Version Name 2',
	N'Test Get Version Desc 2',
	2,
	@testdata_id
)

SELECT @id2 = CAST(SCOPE_IDENTITY() AS INT);

--Other Variables

DECLARE @error_message NVARCHAR(248);

--Check being not logged in raises an error

BEGIN TRY
	EXECUTE  [simsig].[USp_GET_TVERSION] @id = @id1, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Log in Editor.

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id;

--Check 1 Record is returned when specific ID (First Record) passed and check values.

--Result Set 2

EXEC [simsig].[USp_GET_TVERSION] @id = @id1, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check passing 0 still returns 2 Records

--Result Set 3

EXEC [simsig].[USp_GET_TVERSION] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Log in Standard User.

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY', @testdata_id = @testdata_id;

--Result Set 4

EXEC [simsig].[USp_GET_TVERSION] @id = @id2, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check returning all record for a standard user omits dev versions

--Result Set 5

EXEC [simsig].[USp_GET_TVERSION] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check Debugging

SET @debug = 1;

--Result Set 6

EXEC [simsig].[USp_GET_TVERSION] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
</value>
  </data>
  <data name="simsig_USp_GET_TVERSIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>-- Get TestData ID;

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;

--Teardown Records

DELETE FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_UPSERT_TLOCATIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_UPSERT_TLOCATION
DECLARE @id AS SMALLINT, @sim_id AS SMALLINT, @tiploc AS NVARCHAR (16), @name AS NVARCHAR (64), @simsig_code AS NVARCHAR (16), @simsig_entry_point AS BIT, @location_type_id TINYINT, @datetime AS DATETIMEOFFSET (7), @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TLOCATIONTest', @testdata_id = @testdata_id OUTPUT;

--Check 1 -- Check not logged in raises error

SELECT @tiploc = NULL,
       @name = N'Test Upsert Location Name 1',
       @simsig_code = N'TUPSERTLOC1',
       @simsig_entry_point = 1,
       @datetime = NULL,
       @debug = 0;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 -- Check Standard User raises error

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY', @testdata_id = @testdata_id

SET @error_message = N' No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT
	[error_message] = @error_message;

--Check 3 -- Check Invalid Name Errors

--Log Editor In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SET @error_message = N' No Error Raised';
SET @name = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3 (Check Empty String)

SELECT
	[error_message] = @error_message;

SET @error_message = N' No Error Raised';
SET @name = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4 (Check &lt;NULL&gt;)

SELECT
	[error_message] = @error_message;

--Check 4 -- Check Invalid SimSig Code Errors

SET @error_message = N' No Error Raised';
SET @name = N'Test Upsert Location Name 1';
SET @simsig_code = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 5 (Check Empty String)

SELECT
	[error_message] = @error_message;

SET @error_message = N' No Error Raised';
SET @simsig_code = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 6 (Check &lt;NULL&gt;)

SELECT
	[error_message] = @error_message;

--Check 5 -- Check NULL Entry point flag Errors

SET @error_message = N' No Error Raised';
SET @name = N'Test Upsert Location Name 1';
SET @simsig_code = 'TUPSERTLOC1';
SET @simsig_entry_point = NULL

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 7

SELECT
	[error_message] = @error_message;

--Check 6 -- Check Invalid Sim ID Errors

SET @error_message = N' No Error Raised';
SET @simsig_entry_point = 0
SET @sim_id = -1;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 8

SELECT
	[error_message] = @error_message;

--Check 8 Check Record Creates Correctly

SET @error_message = N' No Error Raised';
SET @simsig_entry_point = 0
SET @sim_id = 0;

--Log Admin In (this will check this role works ok going forward).

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

--Create Sim

EXEC [simsig].[Usp_UPSERT_TSIM] @id = @sim_id OUTPUT, @name = N'Test Upsert Location Sim Name 1', @description = N'Test Upsert Location Sim Desc 1', @simsig_wiki_link = NULL, @simsig_code = 'Test Uplocation Location Code 1', @datetime = NULL;

--Create Location

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 9

SELECT
	[sim_id] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[createdby_app_id],
	[createdon] = CAST(CASE WHEN [createdon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id],
	[modifiedby_app_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[location_type_id]
FROM [simsig].[TLOCATION]
WHERE
	[id] = @id;

--Check 9 Updating ID change record

--Log Editor back in

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SELECT @tiploc = 'TIPLOC2',
       @name = N'Test Upsert Location Name 2',
       @simsig_code = N'TUPSERTLOC2',
       @simsig_entry_point = 1,
       @datetime = SYSDATETIMEOFFSET(),
       @debug = 0;

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 10

SELECT
	[sim_id] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[createdby_app_id],
	[createdon] = CAST(CASE WHEN [createdon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id],
	[modifiedby_app_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = @datetime THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TLOCATION]
WHERE
	[id] = @id;

--Check 10 Updating Name change record

DECLARE @existing_id SMALLINT = @id;
SET @id = 0;

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 11

SELECT
	[same_id_flag] = CAST(CASE WHEN @id = @existing_id THEN 1 ELSE 0 END AS BIT);

--Check 11 Check Debug

SELECT @tiploc = NULL,
       @name = N'Test Upsert Location Name 3',
       @simsig_code = N'TUPSERTLOC3',
       @simsig_entry_point = 1,
       @datetime = NULL,
       @debug = 1;

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 12

SELECT
	[sim_id] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[createdby_app_id],
	[createdon] = CAST(CASE WHEN [createdon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id],
	[modifiedby_app_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = @datetime THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TLOCATION]
WHERE
	[id] = @id;

--Result Set 13

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Check 13 Check Invalid Location Type

SELECT @tiploc = NULL,
       @name = N'Test Upsert Location Name 4',
       @simsig_code = N'TUPSERTLOC4',
       @simsig_entry_point = 1,
       @datetime = NULL,
       @debug = 1,
	   @location_type_id = 255,
	   @error_message = N' No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @location_type_id, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 14

SELECT
	[error_message] = @error_message;</value>
  </data>
  <data name="simsig_USp_UPSERT_TLOCATIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TLOCATIONTest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;
</value>
  </data>
  <data name="simsig_USp_GET_TLOCATIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TLOCATION
DECLARE @id AS SMALLINT = 0, @debug AS BIT = 0, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TLOCATIONTest', @testdata_id = @testdata_id OUTPUT;


--Check 1 Check Being Not Logged in Raises Error

BEGIN TRY
	EXEC [simsig].[USp_GET_TLOCATION] @id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 Does Proc Return Data As Expected?

--Log In User

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

--Create Sim

DECLARE @sim_id INT = 0;

EXEC [simsig].[Usp_UPSERT_TSIM] @id = @sim_id OUTPUT, @name = N'Test Get Location Sim Name 1', @description = N'Test Get Location Sim Desc 1', @simsig_wiki_link = NULL, @simsig_code = 'Test Get Location Code 1', @datetime = NULL;

--Create Location(s)

DECLARE @id1 SMALLINT = 0;
EXEC [simsig].[USp_UPSERT_TLOCATION] @id = @id1 OUTPUT, @sim_id = @sim_id, @tiploc = NULL, @name = 'Test Get Location Loc Name 1', @simsig_code = 'GETLOCCODE1', @simsig_entry_point = 1, @location_type_id = NULL, @datetime = NULL, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

DECLARE @id2 SMALLINT = 0;
EXEC [simsig].[USp_UPSERT_TLOCATION] @id = @id2 OUTPUT, @sim_id = @sim_id, @tiploc = NULL, @name = 'Test Get Location Loc Name 2', @simsig_code = 'GETLOCCODE2', @simsig_entry_point = 0, @location_type_id = NULL, @datetime = NULL, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
--Result Set 2 (1st Location)

EXEC [simsig].[USp_GET_TLOCATION] @id1, @debug, @debug_session_id OUTPUT

--Result Set 3 (2nd Location)

EXEC [simsig].[USp_GET_TLOCATION] @id2, @debug, @debug_session_id OUTPUT

--Check 3 Check debug

DECLARE @id3 SMALLINT = 0;
SET @debug = 1;
EXEC [simsig].[USp_UPSERT_TLOCATION] @id = @id2 OUTPUT, @sim_id = @sim_id, @tiploc = NULL, @name = 'Test Get Location Loc Name 2', @simsig_code = 'GETLOCCODE2', @simsig_entry_point = 0, @location_type_id = NULL, @datetime = NULL, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 4

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id;</value>
  </data>
  <data name="simsig_USp_GET_TLOCATIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TLOCATIONTest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;
</value>
  </data>
  <data name="simsig_Usp_GET_TLOCATION_BY_SIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TLOCATION
DECLARE @sim_id AS SMALLINT = 0, @debug AS BIT = 0, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TLOCATION_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

--Check 1 Check Being Not Logged in Raises Error

BEGIN TRY
	EXEC [simsig].[USp_GET_TLOCATION_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 Does Proc Return Data As Expected?

--Log In User

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

--Create Sim

SET @sim_id = 0;

EXEC [simsig].[Usp_UPSERT_TSIM] @id = @sim_id OUTPUT, @name = N'Test Get Location Sim Name 1', @description = N'Test Get Location Sim Desc 1', @simsig_wiki_link = NULL, @simsig_code = 'Test Get Location Code 1', @datetime = NULL;

--Create Location(s)

DECLARE @id1 SMALLINT = 0;
EXEC [simsig].[USp_UPSERT_TLOCATION] @id = @id1 OUTPUT, @sim_id = @sim_id, @tiploc = NULL, @name = 'Test Get Location By SIM Loc Name 1', @simsig_code = 'GETLOCBYSIMCODE1', @simsig_entry_point = 1, @location_type_id = NULL, @datetime = NULL, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

DECLARE @id2 SMALLINT = 0;
EXEC [simsig].[USp_UPSERT_TLOCATION] @id = @id2 OUTPUT, @sim_id = @sim_id, @tiploc = NULL, @name = 'Test Get Location By SIM Loc Name 2', @simsig_code = 'GETLOCBYSIMCODE2', @simsig_entry_point = 0, @location_type_id = NULL, @datetime = NULL, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 2

EXEC [simsig].[USp_GET_TLOCATION_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT


--Check 2 Check debug

SET @debug = 1;
EXEC [simsig].[USp_GET_TLOCATION_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT

--Result Set 3

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id;</value>
  </data>
  <data name="simsig_Usp_GET_TLOCATION_BY_SIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TLOCATION_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;
</value>
  </data>
  <data name="simsig_USp_UPSERT_TLOCATIONNODETest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_UPSERT_TLOCATIONNODE
DECLARE @id AS INT, @sim_id AS SMALLINT, @location_id AS INT, @simera_id AS SMALLINT, @version_id AS SMALLINT, @simsig_platform_code AS VARCHAR (4), @simsig_elec_bitmap AS TINYINT, @location_type_id AS TINYINT, @length AS SMALLINT, @freight_only AS BIT, @simsig_line AS VARCHAR (4), @simsig_path AS VARCHAR (4), @datetime AS DATETIMEOFFSET (7), @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TLOCATIONNODETest', @testdata_id = @testdata_id OUTPUT;

--Create Supporting Data

--Create Sim

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	N'Upsert TLOCATIONNODE Sim Name 1',
	N'Upsert TLOCATIONNODE Sim Desc 1',
	N'UPSTLOCNOTECode1',
	NULL,
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET(),
	@testdata_id
)

SELECT @sim_id = CAST(SCOPE_IDENTITY() AS INT);

--Create SimEra

INSERT INTO [simsig].[TSIMERA]
(
	[sim_id],
	[name],
	[description],
	[era_type_id],
	[testdata_id]
)
VALUES
(
	@sim_id,
	N'Upsert TLOCATIONNODE Sim Name 1',
	N'Upsert TLOCATIONNODE Sim Desc 1',
	2,
	@testdata_id
);

SELECT @simera_id = CAST(SCOPE_IDENTITY() AS INT);

--Create Version

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	1.0,
	NULL,
	N'Upsert TLOCATIONNODE Name 1',
	N'Upsert TLOCATIONNODE Desc 1',
	2,
	@testdata_id
);

SELECT @version_id = CAST(SCOPE_IDENTITY() AS INT);

--Create a location

INSERT INTO [simsig].[TLOCATION]
(
	[sim_id],
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id],
	[createdby_id],
	[createdby_app_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[modifiedby_app_id]
)
VALUES
(
	@sim_id,
	NULL,
	N'Upsert TLOCATIONNODE Name 1',
	N'UPSTLOCNOTECode1',
	1,
	@testdata_id,
	4,
	2,
	SYSDATETIME(),
	4,
	SYSDATETIME(),
	2
)

SELECT @location_id = CAST(SCOPE_IDENTITY() AS INT);

SELECT @simsig_platform_code = NULL,
       @simsig_elec_bitmap = NULL,
       @location_type_id = NULL,
       @length = 0,
       @freight_only = 0,
       @simsig_line = NULL,
       @simsig_path = NULL,
       @datetime = NULL,
       @debug = 0;

--Check 1 Test user not logged in creates an error

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 -- Check Standard User raises error

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY', @testdata_id = @testdata_id

SET @error_message = N'No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT
	[error_message] = @error_message;

--Check 3 Check that passing an invalid Sim raises an error

--Log Editor User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SET @error_message = N'No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, -1, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT
	[error_message] = @error_message;

--Check 4 Check that passing an invalid Location raises an error

SET @error_message = N'No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, -1, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4

SELECT
	[error_message] = @error_message;

--Check 5 Check that passing an invalid Sim Era raises an error

SET @error_message = N'No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, -1, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 5

SELECT
	[error_message] = @error_message;

--Check 6 Check that passing an invalid Version raises an error

SET @error_message = N'No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, -1, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 6

SELECT
	[error_message] = @error_message;

--Check 7 Check that passing an invalid Location Type raises an error

SET @error_message = N'No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, 255, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 7

SELECT
	[error_message] = @error_message;

--Check 8 Check record get's created as expected

SET @error_message = N'No Error Raised';
SET @location_type_id = 1;
SET @simsig_elec_bitmap = 0;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 8

SELECT
	[sim_id] = CAST(CASE WHEN @sim_id = [sim_id] THEN 1 ELSE 0 END AS BIT),
	[location_id] = CAST(CASE WHEN @location_id = [location_id] THEN 1 ELSE 0 END AS BIT),
	[simera_id] = CAST(CASE WHEN @simera_id = [simera_id] THEN 1 ELSE 0 END AS BIT),
	[version_id] = CAST(CASE WHEN version_id = [version_id] THEN 1 ELSE 0 END AS BIT),
	[simsig_platform_code],
	[simsig_elec_bitmap],
	[location_type_id],
	[length],
	[freight_only],
	[simsig_line],
	[simsig_path],
	[testdata_id],
	[createdby_id],
	[createdby_app_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[modifiedby_app_id]
FROM [simsig].[TLOCATIONNODE]
WHERE
	[id] = @id;</value>
  </data>
  <data name="simsig_USp_UPSERT_TLOCATIONNODETest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TLOCATIONNODETest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TLOCATIONNODE]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_GET_TSIM_BY_SIMSIG_CODETest_TestAction.SqlScript" xml:space="preserve">
    <value>

-- database unit test for simsig.USp_GET_TSIM
DECLARE @id AS SMALLINT;
DECLARE @debug AS BIT = 0;
DECLARE @debug_session_id AS UNIQUEIDENTIFIER = NULL;
DECLARE @inserted_record1_id AS SMALLINT; --The ID of the first inserted record
DECLARE @created_datetime DATETIMEOFFSET = SYSDATETIMEOFFSET();
DECLARE @error_message NVARCHAR(256);
DECLARE @testdata_id UNIQUEIDENTIFIER;
DECLARE @simsig_code NVARCHAR(32);

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TSIM_BY_SIMSIG_CODETest', @testdata_id = @testdata_id OUTPUT;

--Set up data

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test Get Sim By SimSig Code Name 1',
	'Test Get Sim By SimSig Code Description 1',
	'TestSimSigCode 5GfDS',
	'Test Get Sim By SimSig Code Wiki Link 1',
	2,
	@created_datetime,
	2,
	@created_datetime,
	@testdata_id
)

SET @inserted_record1_id = CAST(SCOPE_IDENTITY() AS INT);
SET @created_datetime = SYSDATETIMEOFFSET();
SET @simsig_code = 'TestSimSigCode 5GfDS';

--Check 1 Ensure Errors as user not logged int

BEGIN TRY
	EXEC [simsig].[USp_GET_TSIM_BY_SIMSIG_CODE] @simsig_code = @simsig_code, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Check 2 the first record is returned when ID is passed

SET @simsig_code = NULL;

BEGIN TRY
	EXEC [simsig].[USp_GET_TSIM_BY_SIMSIG_CODE] @simsig_code = @simsig_code, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result set 2

SELECT
	[error_message] = @error_message;

SET @simsig_code = 'TestSimSigCode 5GfDS';

--Check 3 ensure all records are returned

--Result Set 3
EXEC [simsig].[USp_GET_TSIM_BY_SIMSIG_CODE] @simsig_code = @simsig_code, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check 4 ensure debug enters event records

SET @debug = 1
EXEC [simsig].[USp_GET_TSIM_BY_SIMSIG_CODE] @simsig_code = @simsig_code, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 5
SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Check 5 ensure debug enters event records for the correct @debug_session_id

SET @debug_session_id = NEWID();
DECLARE @expected_debug_session_id UNIQUEIDENTIFIER = @debug_session_id;

EXEC [simsig].[USp_GET_TSIM_BY_SIMSIG_CODE] @simsig_code = @simsig_code, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 7

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @expected_debug_session_id;</value>
  </data>
  <data name="simsig_Usp_GET_TSIM_BY_SIMSIG_CODETest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TSIM_BY_SIMSIG_CODETest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_GET_TVERSION_BY_VERSION_NUMBERTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TVERSION
DECLARE @version_number NUMERIC(8,4) = 1.5, @debug AS BIT = NULL, @debug_session_id AS UNIQUEIDENTIFIER = NULL, @testdata_id UNIQUEIDENTIFIER;

-- Get TestData ID;

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TVERSION_BY_VERSION_NUMBERTest', @testdata_id = @testdata_id OUTPUT;

--Create some test data

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	1.0,
	1.9,
	N'Test Get By Number Version Name 1',
	N'Test Get By Number Version Desc 1',
	1,
	@testdata_id
)

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	2.0,
	NULL,
	N'Test Get By Number Version Name 2',
	N'Test Get By Number Version Desc 2',
	2,
	@testdata_id
)

--Other Variables

DECLARE @error_message NVARCHAR(248);

--Check being not logged in raises an error

BEGIN TRY
	EXECUTE  [simsig].[Usp_GET_TVERSION_BY_VERSION_NUMBER] @version_number = @version_number, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Log in Editor.

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id;

--Check 1 Record is returned when specific ID (First Record) passed and check values.

--Result Set 2

EXEC [simsig].[Usp_GET_TVERSION_BY_VERSION_NUMBER] @version_number = @version_number, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

sET @version_number = 3.0;

--Check 3 Ensure getting open version returns correct record

--Result Set3

EXEC [simsig].[Usp_GET_TVERSION_BY_VERSION_NUMBER] @version_number = @version_number, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

SET @debug = 1

--Check 4 Check debug writes records

EXEC [simsig].[Usp_GET_TVERSION_BY_VERSION_NUMBER] @version_number = @version_number, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 5

SELECT
	*
FROM audit.TEVENT
WHERE
	debug_session_id = @debug_session_id;

--Check 5 Check Debugging With Session ID

SET @debug_session_id = NEWID();

EXEC [simsig].[Usp_GET_TVERSION_BY_VERSION_NUMBER] @version_number = @version_number, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

SELECT
	*
FROM audit.TEVENT
WHERE
	debug_session_id = @debug_session_id;</value>
  </data>
  <data name="simsig_Usp_GET_TVERSION_BY_VERSION_NUMBERTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>-- Get TestData ID;

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TVERSION_BY_VERSION_NUMBERTest', @testdata_id = @testdata_id OUTPUT;

--Teardown Records

DELETE FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <metadata name="chk_Usp_GET_TLOCATIONNODE_CheckDebug_CheckSchema.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="chk_Usp_GET_TLOCATIONNODE_CheckDebug_CheckSchema.Schema" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAE5TeXN0ZW0uRGF0YSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJl
        PW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAABNTeXN0ZW0uRGF0YS5E
        YXRhU2V0AwAAABdEYXRhU2V0LlJlbW90aW5nVmVyc2lvbglYbWxTY2hlbWELWG1sRGlmZkdyYW0DAQEO
        U3lzdGVtLlZlcnNpb24CAAAACQMAAAAGBAAAAM9dPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0i
        dXRmLTE2Ij8+DQo8eHM6c2NoZW1hIGlkPSJOZXdEYXRhU2V0IiB4bWxucz0iIiB4bWxuczp4cz0iaHR0
        cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOm1zZGF0YT0idXJuOnNjaGVtYXMtbWlj
        cm9zb2Z0LWNvbTp4bWwtbXNkYXRhIj4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTmV3RGF0YVNldCIgbXNk
        YXRhOklzRGF0YVNldD0idHJ1ZSIgbXNkYXRhOkxvY2FsZT0iZW4tR0IiPg0KICAgIDx4czpjb21wbGV4
        VHlwZT4NCiAgICAgIDx4czpjaG9pY2UgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCI+
        DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IlRhYmxlIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5
        cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5h
        bWU9ImVycm9yX21lc3NhZ2UiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0i
        IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgICAgIDwv
        eHM6Y29tcGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxlbWVudD4NCiAgICAgICAgPHhzOmVsZW1lbnQg
        bmFtZT0iVGFibGUxIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQogICAgICAgICAgICA8eHM6
        c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImlkIiB0eXBlPSJ4czppbnQi
        IG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8
        eHM6ZWxlbWVudCBuYW1lPSJzaW1faWQiIHR5cGU9InhzOnNob3J0IiBtc2RhdGE6dGFyZ2V0TmFtZXNw
        YWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2lt
        X25hbWUiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9
        IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Im5hbWUiIHR5cGU9InhzOnN0cmlu
        ZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAg
        IDx4czplbGVtZW50IG5hbWU9InRpcGxvYyIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFt
        ZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i
        bG9jYXRpb25faWQiIHR5cGU9InhzOmludCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1
        cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNpbXNpZ19jb2RlIiB0eXBl
        PSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAg
        ICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzaW1zaWdfZW50cnlfcG9pbnQiIHR5cGU9InhzOmJv
        b2xlYW4iIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAg
        ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzaW1zaWdfcGxhdGZvcm1fY29kZSIgdHlwZT0ieHM6c3RyaW5n
        IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAg
        PHhzOmVsZW1lbnQgbmFtZT0ic2ltc2lnX2xpbmUiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdl
        dE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5h
        bWU9InNpbXNpZ19wYXRoIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIg
        bWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzaW1zaWdfZWxl
        Y19iaXRtYXAiIHR5cGU9InhzOnVuc2lnbmVkQnl0ZSIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBt
        aW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImZyZWlnaHRfb25s
        eSIgdHlwZT0ieHM6Ym9vbGVhbiIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAi
        IC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Imxlbmd0aCIgdHlwZT0ieHM6c2hvcnQi
        IG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8
        eHM6ZWxlbWVudCBuYW1lPSJsb2NhdGlvbl90eXBlX2lkIiB0eXBlPSJ4czp1bnNpZ25lZEJ5dGUiIG1z
        ZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6
        ZWxlbWVudCBuYW1lPSJsb2NhdGlvbl90eXBlIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXRO
        YW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1l
        PSJzaW1lcmFfaWQiIHR5cGU9InhzOnNob3J0IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9j
        Y3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0idmVyc2lvbl9pZCIgdHlw
        ZT0ieHM6c2hvcnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAg
        ICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJjcmVhdGVkYnlfaWQiIHR5cGU9InhzOnNob3J0IiBt
        c2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhz
        OmVsZW1lbnQgbmFtZT0iY3JlYXRlZF9ieV91c2VybmFtZSIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6
        dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1l
        bnQgbmFtZT0iY3JlYXRlZG9uIiBtc2RhdGE6RGF0YVR5cGU9IlN5c3RlbS5EYXRlVGltZU9mZnNldCIg
        dHlwZT0ieHM6YW55VHlwZSIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+
        DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImNyZWF0ZWRfYnlfYXBwIiB0eXBlPSJ4czpz
        dHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAg
        ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJtb2RpZmllZGJ5X2lkIiB0eXBlPSJ4czpzaG9ydCIgbXNkYXRh
        OnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVt
        ZW50IG5hbWU9Im1vZGlmaWVkX2J5X3VzZXJuYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJn
        ZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBu
        YW1lPSJtb2RpZmllZG9uIiBtc2RhdGE6RGF0YVR5cGU9IlN5c3RlbS5EYXRlVGltZU9mZnNldCIgdHlw
        ZT0ieHM6YW55VHlwZSIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQog
        ICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Im1vZGlmaWVkX2J5X2FwcCIgdHlwZT0ieHM6c3Ry
        aW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAg
        IDwveHM6c2VxdWVuY2U+DQogICAgICAgICAgPC94czpjb21wbGV4VHlwZT4NCiAgICAgICAgPC94czpl
        bGVtZW50Pg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUYWJsZTIiPg0KICAgICAgICAgIDx4czpj
        b21wbGV4VHlwZT4NCiAgICAgICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICAgICAgPHhzOmVs
        ZW1lbnQgbmFtZT0iaWQiIHR5cGU9InhzOmludCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5P
        Y2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNpbV9pZCIgdHlwZT0i
        eHM6c2hvcnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg
        ICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzaW1fbmFtZSIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6
        dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1l
        bnQgbmFtZT0ibmFtZSIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1p
        bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0idGlwbG9jIiB0eXBl
        PSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAg
        ICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJsb2NhdGlvbl9pZCIgdHlwZT0ieHM6aW50IiBtc2Rh
        dGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVs
        ZW1lbnQgbmFtZT0ic2ltc2lnX2NvZGUiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVz
        cGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNp
        bXNpZ19lbnRyeV9wb2ludCIgdHlwZT0ieHM6Ym9vbGVhbiIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0i
        IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNpbXNpZ19w
        bGF0Zm9ybV9jb2RlIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWlu
        T2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzaW1zaWdfbGluZSIg
        dHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4N
        CiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2ltc2lnX3BhdGgiIHR5cGU9InhzOnN0cmlu
        ZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAg
        IDx4czplbGVtZW50IG5hbWU9InNpbXNpZ19lbGVjX2JpdG1hcCIgdHlwZT0ieHM6dW5zaWduZWRCeXRl
        IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAg
        PHhzOmVsZW1lbnQgbmFtZT0iZnJlaWdodF9vbmx5IiB0eXBlPSJ4czpib29sZWFuIiBtc2RhdGE6dGFy
        Z2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQg
        bmFtZT0ibGVuZ3RoIiB0eXBlPSJ4czpzaG9ydCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5P
        Y2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImxvY2F0aW9uX3R5cGVf
        aWQiIHR5cGU9InhzOnVuc2lnbmVkQnl0ZSIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1
        cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImxvY2F0aW9uX3R5cGUiIHR5
        cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQog
        ICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNpbWVyYV9pZCIgdHlwZT0ieHM6c2hvcnQiIG1z
        ZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6
        ZWxlbWVudCBuYW1lPSJ2ZXJzaW9uX2lkIiB0eXBlPSJ4czpzaG9ydCIgbXNkYXRhOnRhcmdldE5hbWVz
        cGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImNy
        ZWF0ZWRieV9pZCIgdHlwZT0ieHM6c2hvcnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2Nj
        dXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJjcmVhdGVkX2J5X3VzZXJu
        YW1lIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIw
        IiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJjcmVhdGVkb24iIG1zZGF0YTpEYXRh
        VHlwZT0iU3lzdGVtLkRhdGVUaW1lT2Zmc2V0IiB0eXBlPSJ4czphbnlUeXBlIiBtc2RhdGE6dGFyZ2V0
        TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFt
        ZT0iY3JlYXRlZF9ieV9hcHAiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0i
        IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Im1vZGlmaWVk
        YnlfaWQiIHR5cGU9InhzOnNob3J0IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0i
        MCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ibW9kaWZpZWRfYnlfdXNlcm5hbWUi
        IHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+
        DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Im1vZGlmaWVkb24iIG1zZGF0YTpEYXRhVHlw
        ZT0iU3lzdGVtLkRhdGVUaW1lT2Zmc2V0IiB0eXBlPSJ4czphbnlUeXBlIiBtc2RhdGE6dGFyZ2V0TmFt
        ZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i
        bW9kaWZpZWRfYnlfYXBwIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIg
        bWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgICAgICA8L3hz
        OmNvbXBsZXhUeXBlPg0KICAgICAgICA8L3hzOmVsZW1lbnQ+DQogICAgICAgIDx4czplbGVtZW50IG5h
        bWU9IlRhYmxlMyI+DQogICAgICAgICAgPHhzOmNvbXBsZXhUeXBlPg0KICAgICAgICAgICAgPHhzOnNl
        cXVlbmNlPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJpZCIgdHlwZT0ieHM6aW50IiBt
        c2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhz
        OmVsZW1lbnQgbmFtZT0iZGVidWdfc2Vzc2lvbl9pZCIgbXNkYXRhOkRhdGFUeXBlPSJTeXN0ZW0uR3Vp
        ZCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
        bj1iNzdhNWM1NjE5MzRlMDg5IiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9
        IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJldmVudF9k
        YXRldGltZSIgdHlwZT0ieHM6ZGF0ZVRpbWUiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2Nj
        dXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzb3VyY2Vfb2JqZWN0X2lk
        IiB0eXBlPSJ4czppbnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0K
        ICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJldmVudCIgdHlwZT0ieHM6c3RyaW5nIiBtc2Rh
        dGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVs
        ZW1lbnQgbmFtZT0iZGJfdXNlciIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNl
        PSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iYXBwX2lk
        IiB0eXBlPSJ4czpzaG9ydCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+
        DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImFwcF91c2VyX2lkIiB0eXBlPSJ4czppbnQi
        IG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgPC94
        czpzZXF1ZW5jZT4NCiAgICAgICAgICA8L3hzOmNvbXBsZXhUeXBlPg0KICAgICAgICA8L3hzOmVsZW1l
        bnQ+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IlRhYmxlNCI+DQogICAgICAgICAgPHhzOmNvbXBs
        ZXhUeXBlPg0KICAgICAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVu
        dCBuYW1lPSJpZCIgdHlwZT0ieHM6aW50IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vy
        cz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2ltX2lkIiB0eXBlPSJ4czpz
        aG9ydCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAg
        ICAgIDx4czplbGVtZW50IG5hbWU9InNpbV9uYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJn
        ZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBu
        YW1lPSJuYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2Nj
        dXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJ0aXBsb2MiIHR5cGU9Inhz
        OnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAg
        ICAgICAgIDx4czplbGVtZW50IG5hbWU9ImxvY2F0aW9uX2lkIiB0eXBlPSJ4czppbnQiIG1zZGF0YTp0
        YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVu
        dCBuYW1lPSJzaW1zaWdfY29kZSIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNl
        PSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2ltc2ln
        X2VudHJ5X3BvaW50IiB0eXBlPSJ4czpib29sZWFuIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1p
        bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2ltc2lnX3BsYXRm
        b3JtX2NvZGUiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1
        cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNpbXNpZ19saW5lIiB0eXBl
        PSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAg
        ICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJzaW1zaWdfcGF0aCIgdHlwZT0ieHM6c3RyaW5nIiBt
        c2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhz
        OmVsZW1lbnQgbmFtZT0ic2ltc2lnX2VsZWNfYml0bWFwIiB0eXBlPSJ4czp1bnNpZ25lZEJ5dGUiIG1z
        ZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6
        ZWxlbWVudCBuYW1lPSJmcmVpZ2h0X29ubHkiIHR5cGU9InhzOmJvb2xlYW4iIG1zZGF0YTp0YXJnZXRO
        YW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1l
        PSJsZW5ndGgiIHR5cGU9InhzOnNob3J0IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vy
        cz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ibG9jYXRpb25fdHlwZV9pZCIg
        dHlwZT0ieHM6dW5zaWduZWRCeXRlIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0i
        MCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ibG9jYXRpb25fdHlwZSIgdHlwZT0i
        eHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg
        ICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2ltZXJhX2lkIiB0eXBlPSJ4czpzaG9ydCIgbXNkYXRh
        OnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVt
        ZW50IG5hbWU9InZlcnNpb25faWQiIHR5cGU9InhzOnNob3J0IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNl
        PSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iY3JlYXRl
        ZGJ5X2lkIiB0eXBlPSJ4czpzaG9ydCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9
        IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImNyZWF0ZWRfYnlfdXNlcm5hbWUi
        IHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+
        DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImNyZWF0ZWRvbiIgbXNkYXRhOkRhdGFUeXBl
        PSJTeXN0ZW0uRGF0ZVRpbWVPZmZzZXQiIHR5cGU9InhzOmFueVR5cGUiIG1zZGF0YTp0YXJnZXROYW1l
        c3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJj
        cmVhdGVkX2J5X2FwcCIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1p
        bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ibW9kaWZpZWRieV9p
        ZCIgdHlwZT0ieHM6c2hvcnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAv
        Pg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJtb2RpZmllZF9ieV91c2VybmFtZSIgdHlw
        ZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAg
        ICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ibW9kaWZpZWRvbiIgbXNkYXRhOkRhdGFUeXBlPSJT
        eXN0ZW0uRGF0ZVRpbWVPZmZzZXQiIHR5cGU9InhzOmFueVR5cGUiIG1zZGF0YTp0YXJnZXROYW1lc3Bh
        Y2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJtb2Rp
        ZmllZF9ieV9hcHAiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5P
        Y2N1cnM9IjAiIC8+DQogICAgICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgICAgIDwveHM6Y29t
        cGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxlbWVudD4NCiAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i
        VGFibGU1Ij4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVu
        Y2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImlkIiB0eXBlPSJ4czppbnQiIG1zZGF0
        YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxl
        bWVudCBuYW1lPSJkZWJ1Z19zZXNzaW9uX2lkIiBtc2RhdGE6RGF0YVR5cGU9IlN5c3RlbS5HdWlkLCBt
        c2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3
        N2E1YzU2MTkzNGUwODkiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBt
        aW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImV2ZW50X2RhdGV0
        aW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9
        IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InNvdXJjZV9vYmplY3RfaWQiIHR5
        cGU9InhzOmludCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAg
        ICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImV2ZW50IiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0
        YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVu
        dCBuYW1lPSJkYl91c2VyIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIg
        bWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJhcHBfaWQiIHR5
        cGU9InhzOnNob3J0IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAg
        ICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iYXBwX3VzZXJfaWQiIHR5cGU9InhzOmludCIgbXNk
        YXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICA8L3hzOnNl
        cXVlbmNlPg0KICAgICAgICAgIDwveHM6Y29tcGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxlbWVudD4N
        CiAgICAgIDwveHM6Y2hvaWNlPg0KICAgIDwveHM6Y29tcGxleFR5cGU+DQogIDwveHM6ZWxlbWVudD4N
        CjwveHM6c2NoZW1hPgYFAAAAgAE8ZGlmZmdyOmRpZmZncmFtIHhtbG5zOm1zZGF0YT0idXJuOnNjaGVt
        YXMtbWljcm9zb2Z0LWNvbTp4bWwtbXNkYXRhIiB4bWxuczpkaWZmZ3I9InVybjpzY2hlbWFzLW1pY3Jv
        c29mdC1jb206eG1sLWRpZmZncmFtLXYxIiAvPgQDAAAADlN5c3RlbS5WZXJzaW9uBAAAAAZfTWFqb3IG
        X01pbm9yBl9CdWlsZAlfUmV2aXNpb24AAAAACAgICAIAAAAAAAAA//////////8L
</value>
  </data>
  <data name="simsig_USp_GET_TLOCATIONNODETest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TLOCATION
DECLARE @id AS INT, @sim_id AS SMALLINT, @location_id AS INT, @simera_id AS SMALLINT, @version_id AS SMALLINT, @simsig_platform_code AS VARCHAR (4), @simsig_elec_bitmap AS TINYINT = 1, @location_type_id AS TINYINT = 1, @length AS SMALLINT, @freight_only AS BIT = 0, @simsig_line AS VARCHAR (4), @simsig_path AS VARCHAR (4), @datetime AS DATETIMEOFFSET (7), @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TLOCATIONNODETest', @testdata_id = @testdata_id OUTPUT;

--Create Supporting Data

--Create Sim

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	N'Get TLOCATIONNODE Sim Name 1',
	N'Get TLOCATIONNODE Sim Desc 1',
	N'UPSTLOCNOTECode1',
	NULL,
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET(),
	@testdata_id
)

SELECT @sim_id = CAST(SCOPE_IDENTITY() AS INT);

--Create SimEra

INSERT INTO [simsig].[TSIMERA]
(
	[sim_id],
	[name],
	[description],
	[era_type_id],
	[testdata_id]
)
VALUES
(
	@sim_id,
	N'Get TLOCATIONNODE Sim Name 1',
	N'Get TLOCATIONNODE Sim Desc 1',
	2,
	@testdata_id
);

SELECT @simera_id = CAST(SCOPE_IDENTITY() AS INT);

--Create Version

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	1.0,
	NULL,
	N'Get TLOCATIONNODE Name 1',
	N'Get TLOCATIONNODE Desc 1',
	2,
	@testdata_id
);

SELECT @version_id = CAST(SCOPE_IDENTITY() AS INT);

--Create a location

INSERT INTO [simsig].[TLOCATION]
(
	[sim_id],
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id],
	[createdby_id],
	[createdby_app_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[modifiedby_app_id],
	[location_type_id]
)
VALUES
(
	@sim_id,
	NULL,
	N'Get TLOCATIONNODE Name 1',
	N'GETTLOCNOTECode1',
	1,
	@testdata_id,
	4,
	2,
	SYSDATETIME(),
	4,
	SYSDATETIME(),
	2,
	0
)

SELECT @location_id = CAST(SCOPE_IDENTITY() AS INT);

--Upsert LocationNode

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;

--Log User Out

EXEC [common].[Usp_CLEAR_SESSIONCONTEXT];

--Check 1 Check Being Not Logged in Raises Error

BEGIN TRY
	EXEC [simsig].[USp_GET_TLOCATIONNODE] @id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 Does Proc Return Data As Expected?

--Log In User

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_GET_TLOCATIONNODE] @id, @debug, @debug_session_id OUTPUT;

--Check 3 - Debug

SET @debug = 1;
EXEC [simsig].[USp_GET_TLOCATIONNODE] @id, @debug, @debug_session_id OUTPUT;

--Result Set 4

SELECT
	*
FROM audit.TEVENT
WHERE
	[debug_session_id] = @debug_session_id;

--Check 4 - Debug with session id

SET @debug_session_id = NEWID();

SET @debug = 1;
EXEC [simsig].[USp_GET_TLOCATIONNODE] @id, @debug, @debug_session_id OUTPUT;

--Result Set 6

SELECT
	*
FROM audit.TEVENT
WHERE
	[debug_session_id] = @debug_session_id;
</value>
  </data>
  <data name="simsig_USp_GET_TLOCATIONNODETest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TLOCATIONNODETest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TLOCATIONNODE]
WHERE
	[testdata_id] = @testdata_id;
	
DELETE FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;
</value>
  </data>
  <data name="simsig_Usp_GET_TLOCATIONNODE_BY_SIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TLOCATIONNODE_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TLOCATIONNODE]
WHERE
	[testdata_id] = @testdata_id;
	
DELETE FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;
</value>
  </data>
  <data name="simsig_Usp_GET_TLOCATIONNODE_BY_SIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TLOCATION
DECLARE @id AS INT, @sim_id AS SMALLINT, @location_id AS INT, @simera_id AS SMALLINT, @version_id AS SMALLINT, @simsig_platform_code AS VARCHAR (4), @simsig_elec_bitmap AS TINYINT = 1, @location_type_id AS TINYINT = 1, @length AS SMALLINT, @freight_only AS BIT = 0, @simsig_line AS VARCHAR (4), @simsig_path AS VARCHAR (4), @datetime AS DATETIMEOFFSET (7), @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TLOCATIONNODE_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

--Create Supporting Data

--Create Sim

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	N'Get TLOCATIONNODE Sim Name 1',
	N'Get TLOCATIONNODE Sim Desc 1',
	N'UPSTLOCNOTECode1',
	NULL,
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET(),
	@testdata_id
)

SELECT @sim_id = CAST(SCOPE_IDENTITY() AS INT);

--Create SimEra

INSERT INTO [simsig].[TSIMERA]
(
	[sim_id],
	[name],
	[description],
	[era_type_id],
	[testdata_id]
)
VALUES
(
	@sim_id,
	N'Get TLOCATIONNODE Sim Name 1',
	N'Get TLOCATIONNODE Sim Desc 1',
	2,
	@testdata_id
);

SELECT @simera_id = CAST(SCOPE_IDENTITY() AS INT);

--Create Version

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	1.0,
	NULL,
	N'Get TLOCATIONNODE Name 1',
	N'Get TLOCATIONNODE Desc 1',
	2,
	@testdata_id
);

SELECT @version_id = CAST(SCOPE_IDENTITY() AS INT);

--Create a location

INSERT INTO [simsig].[TLOCATION]
(
	[sim_id],
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id],
	[createdby_id],
	[createdby_app_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[modifiedby_app_id],
	[location_type_id]
)
VALUES
(
	@sim_id,
	NULL,
	N'Get TLOCATIONNODE Name 1',
	N'GETTLOCNOTECode1',
	1,
	@testdata_id,
	4,
	2,
	SYSDATETIME(),
	4,
	SYSDATETIME(),
	2,
	0
)

SELECT @location_id = CAST(SCOPE_IDENTITY() AS INT);

--Upsert LocationNode

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TLOCATIONNODE] @id OUTPUT, @sim_id, @location_id, @simera_id, @version_id, @simsig_platform_code, @simsig_elec_bitmap, @location_type_id, @length, @freight_only, @simsig_line, @simsig_path, @datetime, @debug, @debug_session_id OUTPUT;

--Log User Out

EXEC [common].[Usp_CLEAR_SESSIONCONTEXT];

--Check 1 Check Being Not Logged in Raises Error

BEGIN TRY
	EXEC [simsig].[USp_GET_TLOCATIONNODE_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 Does Proc Return Data As Expected?

--Log In User

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_GET_TLOCATIONNODE_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT;

--Check 3 - Debug

SET @debug = 1;
EXEC [simsig].[USp_GET_TLOCATIONNODE_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT;

--Result Set 4

SELECT
	*
FROM audit.TEVENT
WHERE
	[debug_session_id] = @debug_session_id;

--Check 4 - Debug with session id

SET @debug_session_id = NEWID();

SET @debug = 1;
EXEC [simsig].[USp_GET_TLOCATIONNODE_BY_SIM] @sim_id, @debug, @debug_session_id OUTPUT;

--Result Set 6

SELECT
	*
FROM audit.TEVENT
WHERE
	[debug_session_id] = @debug_session_id;
</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>