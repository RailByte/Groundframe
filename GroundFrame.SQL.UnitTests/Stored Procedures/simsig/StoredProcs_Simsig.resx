<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="simsig_USp_UPSERT_TSIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_UPSERT_TSIM
DECLARE @id AS SMALLINT
DECLARE @name AS NVARCHAR (128)
DECLARE @description AS NVARCHAR (2048)
DECLARE @simsig_wiki_link AS NVARCHAR (512)
DECLARE @simsig_code AS NVARCHAR (32)
DECLARE @datetime AS DATETIMEOFFSET (7)
DECLARE @debug AS BIT
DECLARE @debug_session_id AS UNIQUEIDENTIFIER;
DECLARE @error_message NVARCHAR(256);

--Check proc errors if user not logged in

SET @id = 0;
SET @name = 'Test Name';SET @description = 'Test Description';
SET @simsig_wiki_link = 'Test Wiki Link';
SET @simsig_code = 'Test SimSig Code';
SET @datetime = NULL;
SET @debug = 0;
SET @debug_session_id = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log Editor User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Check 2 - Ensure missing @name raises error (&lt;NULL&gt;)

SET @name = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT 
	[error_message] = @error_message;

--Check 3 - Ensure @name raises error (empty string)

SET @name = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT 
	[error_message] = @error_message;

--Check 4 - Ensure @simsig_code raises error (&lt;NULL&gt;)

SET @name = 'Test Name';
SET @simsig_code = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4

SELECT 
	[error_message] = @error_message;

--Check 5 - Ensure @simsig_code raises error (Empty String)

SET @simsig_code = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 5

SELECT 
	[error_message] = @error_message;

--Check 6 - Ensure check record created correctly

SET @simsig_code = 'Test SimSig Code';

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 6

SELECT 
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[modifiedby_id],
	[testdata_id]
FROM [simsig].[TSIM]
WHERE
	[id] = @id

--Check 7 Ensure Default Era Created

--Result Set 7

SELECT
	[id],
	[sim_id],
	[name],
	[description],
	[era_type_id]
FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

--Check 8 - Ensure passing name that already exists that a new record isn't created

DECLARE @created_id SMALLINT = @id;

SET @id = 0;
SET @description = 'Test Description 1';
SET @simsig_wiki_link = 'Test Wiki Link 1';
SET @simsig_code = 'Test SimSig Code 1';

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 8

SELECT 
	[id] = CAST(CASE WHEN [id] = @created_id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = [createdon] THEN 0 ELSE 1 END AS BIT)
FROM [simsig].[TSIM]
WHERE
	[name] = @name;

--Check 9 - Ensure passing id that already exists that a new record isn't created

SET @name = 'Test Name 2';
SET @description = 'Test Description 2';
SET @simsig_wiki_link = 'Test Wiki Link 2';
SET @simsig_code = 'Test SimSig Code 2';

EXEC [simsig].[USp_UPSERT_TSIM] @created_id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 9

SELECT 
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] IS NULL THEN 0 ELSE 1 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = [createdon] THEN 0 ELSE 1 END AS BIT),
	[modifiedby_id]
FROM [simsig].[TSIM]
WHERE
	[id] = @id

--Check 10 - Check only 1 record created at this stage

--Result Set 10

SELECT
	[id]
FROM [simsig].[TSIM]

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

DELETE FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check 11 - Check debug works correctly and a custom date is specified correctly

SET @id = 0
SET @name = 'Test Name 2';
SET @description = 'Test Description 2';
SET @simsig_wiki_link = 'Test Wiki Link 2';
SET @simsig_code = 'Test SimSig Code 2';
SET @debug = 1
SET @datetime = TODATETIMEOFFSET(GETUTCDATE(), '-07:00');

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 11

SELECT 
	[id] = CAST(CASE WHEN [id] != @created_id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdon] = CAST(CASE WHEN [createdon] = @datetime THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = @datetime THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id]
FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Result Set 12

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

DELETE FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check 12 - Check debug works correctly when a specific debug session guid is passed

SET @id = 0
SET @name = 'Test Name 3';
SET @description = 'Test Description 3';
SET @simsig_wiki_link = 'Test Wiki Link 3';
SET @simsig_code = 'Test SimSig Code 3';
SET @debug = 1
SET @datetime = TODATETIMEOFFSET(GETUTCDATE(), '-08:00');
SET @debug_session_id = NEWID();
DECLARE @expected_debug_session_id UNIQUEIDENTIFIER = @debug_session_id;

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 13

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @expected_debug_session_id;

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[sim_id] = @id;

DELETE FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check TestData ID gets added if passed in the session context

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TSIMTest', @testdata_id = @testdata_id OUTPUT;
EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SET @id = 0
SET @name = 'Test Name 4';
SET @description = 'Test Description 4';
SET @simsig_wiki_link = 'Test Wiki Link 4';
SET @simsig_code = 'Test SimSig Code 4';
SET @debug = 1
SET @datetime = NULL;
SET @debug_session_id = NEWID();

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 14

SELECT 
	[testdata_id_check] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TSIM]
WHERE
	[id] = @id;

--Check a standard doesn't have permission

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 15

SELECT 
	[error_message] = @error_message;

--Delete Records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_UPSERT_TSIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TSIMTest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_GET_TSIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TSIM
DECLARE @id AS SMALLINT;
DECLARE @debug AS BIT = 0;
DECLARE @debug_session_id AS UNIQUEIDENTIFIER = NULL;
DECLARE @inserted_record1_id AS SMALLINT; --The ID of the first inserted record
DECLARE @created_datetime DATETIMEOFFSET = SYSDATETIMEOFFSET();
DECLARE @error_message NVARCHAR(256);
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TSIMTest', @testdata_id = @testdata_id OUTPUT;

--Set up data

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test Get Sim Name 1',
	'Test Get Sim Description 1',
	'Test Get Sim Code 1',
	'Test Get Sim Wiki Link 1',
	2,
	@created_datetime,
	2,
	@created_datetime,
	@testdata_id
)

SET @inserted_record1_id = CAST(SCOPE_IDENTITY() AS INT);
SET @created_datetime = SYSDATETIMEOFFSET();

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test Get Sim Name 2',
	'Test Get Sim Description 2',
	'Test Get Sim Code 2',
	'Test Get Sim Wiki Link 2',
	2,
	@created_datetime,
	2,
	@created_datetime,
	@testdata_id
);

--Check 1 Ensure Errors as user not logged int

BEGIN TRY
	EXEC [simsig].[USp_GET_TSIM] @id = @inserted_record1_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Check 2 the first record is returned when ID is passed

--Result Set 2
EXEC [simsig].[USp_GET_TSIM] @id = @inserted_record1_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;


--Check 3 ensure all records are returned

--Result Set 3
EXEC [simsig].[USp_GET_TSIM] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check 4 ensure debug enters event records

SET @debug = 1
EXEC [simsig].[USp_GET_TSIM] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 5
SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Check 5 ensure debug enters event records for the correct @debug_session_id

SET @debug_session_id = NEWID();
DECLARE @expected_debug_session_id UNIQUEIDENTIFIER = @debug_session_id;

EXEC [simsig].[USp_GET_TSIM] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 7

SELECT
	debug_count = CAST(CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END AS BIT)
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @expected_debug_session_id;</value>
  </data>
  <data name="simsig_USp_GET_TSIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TSIMTest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_DELETE_TSIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.Usp_DELETE_TSIM
DECLARE @id AS INT;

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_code],
	[simsig_wiki_link],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon]
)
VALUES
(
	N'Test Delete Name 1',
	N'Test Delete Desc 1',
	N'Test Delete Code 1',
	N'Test Delete Wiki Line 1',
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET()
);

SET @id = (SELECT CAST(SCOPE_IDENTITY() AS INT));

INSERT INTO [simsig].[TSIMERA]
(
	[sim_id],
	[name],
	[description],
	[era_type_id]
)
VALUES
(
	@id,
	N'Test Delete Era Name 1',
	N'Test Delete Era Desc 1',
	2
)

--Result 1 Check Sim was created
SELECT * FROM [simsig].[TSIM] WHERE [id] = @id;
--Result 2 Check Smim Era was created
SELECT * FROM [simsig].[TSIMERA] WHERE [sim_id] = @id;

--Check not being logged in raises error

DECLARE @error_message NVARCHAR(256);

BEGIN TRY
	EXEC [simsig].[Usp_DELETE_TSIM] @id = @id;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3
SELECT
	[error_message] = @error_message;

--Check a standard doesn't have permission

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC  [simsig].[Usp_DELETE_TSIM] @id = @id;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4
SELECT
	[error_message] = @error_message;
		
--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

--Delete Sim
EXEC  [simsig].[Usp_DELETE_TSIM] @id = @id;

--Result 5 Check Sim was deleted
SELECT * FROM [simsig].[TSIM] WHERE [id] = @id;
--Result 6 Check Smim Era was deleted
SELECT * FROM [simsig].[TSIMERA] WHERE [sim_id] = @id;
</value>
  </data>
  <data name="simsig_Usp_GET_TSIMERA_BY_SIMTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.Usp_GET_TSIMERA_BY_SIM
DECLARE @id AS SMALLINT
DECLARE @name AS NVARCHAR (128)
DECLARE @description AS NVARCHAR (2048)
DECLARE @simsig_wiki_link AS NVARCHAR (512)
DECLARE @simsig_code AS NVARCHAR (32)
DECLARE @datetime AS DATETIMEOFFSET (7)
DECLARE @debug AS BIT
DECLARE @debug_session_id AS UNIQUEIDENTIFIER;
DECLARE @error_message NVARCHAR(256);
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TSIMERA_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

--Check proc errors if user not logged in

SET @id = 0;
SET @name = 'Test Get SimEra By Sim Name';
SET @description = 'Test Get SimEra By Sim Description';
SET @simsig_wiki_link = 'Test Get SimEra By Sim Wiki Link';
SET @simsig_code = 'Test Get SimEra By Sim SimSig Code';
SET @datetime = NULL;
SET @debug = 0;
SET @debug_session_id = NULL;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id;

--Create Sim

EXEC [simsig].[USp_UPSERT_TSIM] @id OUTPUT, @name, @description, @simsig_wiki_link, @simsig_code, @datetime, @debug, @debug_session_id OUTPUT;

--Check Proc Returns 1 Row

--Result Set 1

EXEC [simsig].[Usp_GET_TSIMERA_BY_SIM] @sim_id = @id;

--Check if user isn't logged in an error is raised

--Log User Out

EXEC [common].[Usp_CLEAR_SESSIONCONTEXT];

BEGIN TRY
	EXEC [simsig].[Usp_GET_TSIMERA_BY_SIM] @sim_id = @id;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT [error_message] = @error_message;</value>
  </data>
  <data name="simsig_Usp_UPSERT_TSIMERATest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.Usp_UPSERT_TSIMERA

--Arguements for Proc
DECLARE @id AS SMALLINT, @sim_id AS SMALLINT, @name AS NVARCHAR (128), @description AS NVARCHAR (2048), @era_type_id AS TINYINT, @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Create a TestData ID
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Set / Get TestData ID

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_UPSERT_TSIMERATest', @testdata_id = @testdata_id OUTPUT;

--Other Variables
DECLARE @error_message NVARCHAR(258);

--First create a simsig.TSIM record to attach the simulation era against

INSERT INTO [simsig].[TSIM]
(
	[name],
	[description],
	[simsig_wiki_link],
	[simsig_code],
	[createdby_id],
	[createdon],
	[modifiedby_id],
	[modifiedon],
	[testdata_id]
)
VALUES
(
	'Test SimEra Sim Name',
	'Test SimEra Sim Description',
	'Test SimEra Sim Wiki Link',
	'Test SimEra Sim SimSig Code',
	2,
	SYSDATETIMEOFFSET(),
	2,
	SYSDATETIMEOFFSET(),
	@testdata_id
)

SET @id = 0;
SET @sim_id = CAST(SCOPE_IDENTITY() AS SMALLINT);
SET @name = 'Test SimEra Name';
SET @description = 'Test SimEra Description';
SET @era_type_id = 1;
SET @debug = 0;

--Check Error raised if user not logged in

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT 
	[error_message] = @error_message;

--Log User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY';

--Check Error raised if no name passed

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = NULL, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT 
	[error_message] = @error_message;

--Check Error raised if invalid Sim ID passed

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = -1, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT 
	[error_message] = @error_message;

--Check Error raised if invalid era type passed

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = 255, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4

SELECT 
	[error_message] = @error_message;

--Check Insertion happens correctly

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 5

SELECT
	[sim_id_check] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[era_type_id],
	[testdata_id]
FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Check Trying to insert a new era with an existing name updates the existing record

DECLARE @existing_id SMALLINT = @id;

SET @id = 0;

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 6

SELECT
	check_same_id = CAST(CASE WHEN @existing_id = @id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[era_type_id],
	[testdata_id]
FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Check changing description and era type updates record

SET @name = N'Updated Name';
SET @description = N'Updated Description';
SET @era_type_id = 2;


EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result 7

SELECT
	check_same_id = CAST(CASE WHEN @existing_id = @id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[era_type_id],
	[testdata_id]
FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Delete the SimEra

DELETE FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Check Debug works ok

SET @id = 0;
SET @name = 'Test SimEra Name 2';
SET @description = 'Test SimEra Description 2';
SET @era_type_id = 1;
SET @debug = 1;

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 8

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id

--Delete Sim Era

DELETE FROM [simsig].[TSIMERA]
WHERE
	[id] = @id;

--Test TestData get's written correctly

SET @id = 0;
SET @name = 'Test SimEra Name 3';
SET @description = 'Test SimEra Description 3';
SET @era_type_id = 1;
SET @debug = 1;

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Result Set 9

SELECT 
	[id]
FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id

--Check a standard doesn't have permission

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TSIMERA] @id = @id OUTPUT, @sim_id = @sim_id, @name = @name, @description = @description, @era_type_id = @era_type_id, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SET @error_message = ERROR_MESSAGE();
END CATCH;

--Result Set 10

SELECT
	[error_message] = @error_message;</value>
  </data>
  <data name="simsig_USp_UPSERT_TVERSIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_UPSERT_TVERSION
DECLARE	@id AS SMALLINT, 
		@name AS NVARCHAR (128),
		@description AS NVARCHAR (2048),
		@version AS NUMERIC (4, 1),
		@version_status_id AS TINYINT,
		@debug AS BIT, 
		@debug_session_id AS UNIQUEIDENTIFIER;

SELECT @name = 'Test Version 1 Name',
       @description = 'Test Version 1 Description',
       @version = 1.0,
       @version_status_id = 2,
       @debug = 0;

--Other Variables

DECLARE @error_message NVARCHAR(248);

--Check User is logged in

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1 

SELECT 
	[error_message] = @error_message;

--Test Editor is denied access

SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY'

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2 

SELECT 
	[error_message] = @error_message;

--Test Standard is denied access

SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY'

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3

SELECT 
	[error_message] = @error_message;

--Test Admin user works ok

SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY'

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 4

SELECT 
	[id] = CAST(CASE WHEN [id] = @id THEN 1 ELSE 0 END AS BIT),
	[name],
	[description],
	[simsig_version_from],
	[simsig_version_to],
	[version_status_id],
	[testdata_id]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Delete Version

DELETE FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--TestData ID

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;

--Set Variables
SET @id = 0; --Reset ID;
SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 5

SELECT 
	[id]
	[name],
	[description],
	[simsig_version_from],
	[simsig_version_to],
	[version_status_id],
	[testdata_id]
FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;

--Test Updating Status and Name and Description

SET @name = 'Test Version 2 Name'
SET @description = 'Test Version 2 Description'
SET @version_status_id = 1;
SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 6

SELECT 
	[name],
	[description],
	[simsig_version_from],
	[simsig_version_to],
	[version_status_id]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Check trying to update version doesn't result in update

SET @version = 2.0
SET @error_message = N'No Error Thrown';

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 7

SELECT 
	[simsig_version_from],
	[simsig_version_to]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Check Adding a new verions updates previous record and inserts new record correctly

DECLARE @previous_id SMALLINT = @id;
SET @name = 'Test Version 3 Name'
SET @description = 'Test Version 3 Description'
SET @version_status_id = 2;
SET @version = 2.0
SET @error_message = N'No Error Thrown';
SET @id = 0;

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result Set 8

SELECT 
	[simsig_version_from],
	[simsig_version_to]
FROM [simsig].[TVERSION]
WHERE
	[id] = @previous_id;

--Result Set 9

SELECT 
	[simsig_version_from],
	[simsig_version_to]
FROM [simsig].[TVERSION]
WHERE
	[id] = @id;

--Check Debug

SET @debug = 1
SET @name = 'Test Version 4 Name'
SET @description = 'Test Version 4 Description'
SET @version_status_id = 2;
SET @version = 3.0
SET @error_message = N'No Error Thrown';
SET @id = 0;

EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;

--Result 10

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id;

--Check Error thrown if current version is being split

SET @debug = 1
SET @name = 'Test Version 5 Name'
SET @description = 'Test Version 5 Description'
SET @version_status_id = 2;
SET @version = 3.0
SET @error_message = N'No Error Thrown';
SET @id = 0;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TVERSION] @id OUTPUT, @name, @description, @version, @version_status_id, @debug, @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 11

SELECT 
	[error_message] = @error_message;</value>
  </data>
  <data name="simsig_USp_UPSERT_TVERSIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;
DELETE FROM [simsig].[TVERSION] WHERE [testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_GET_TSIMERA_BY_SIMTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_GET_TSIMERA_BY_SIMTest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_Usp_UPSERT_TSIMERATest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_Usp_UPSERT_TSIMERATest', @testdata_id = @testdata_id OUTPUT;

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_GET_TVERSIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_GET_TVERSION
DECLARE @id1 AS SMALLINT, @id2 AS SMALLINT, @debug AS BIT = NULL, @debug_session_id AS UNIQUEIDENTIFIER = NULL, @testdata_id UNIQUEIDENTIFIER;

-- Get TestData ID;

EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;

--Create some test data

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	1.0,
	1.9,
	N'Test Get Version Name 1',
	N'Test Get Version Desc 1',
	1,
	@testdata_id
)

SELECT @id1 = CAST(SCOPE_IDENTITY() AS INT);

INSERT INTO [simsig].[TVERSION]
(
	[simsig_version_from],
	[simsig_version_to],
	[name],
	[description],
	[version_status_id],
	[testdata_id]
)
VALUES
(
	2.0,
	NULL,
	N'Test Get Version Name 2',
	N'Test Get Version Desc 2',
	2,
	@testdata_id
)

SELECT @id2 = CAST(SCOPE_IDENTITY() AS INT);

--Other Variables

DECLARE @error_message NVARCHAR(248);

--Check being not logged in raises an error

BEGIN TRY
	EXECUTE  [simsig].[USp_GET_TVERSION] @id = @id1, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
END TRY
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Log in Editor.

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id;

--Check 1 Record is returned when specific ID (First Record) passed and check values.

--Result Set 2

EXEC [simsig].[USp_GET_TVERSION] @id = @id1, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check passing 0 still returns 2 Records

--Result Set 3

EXEC [simsig].[USp_GET_TVERSION] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Log in Standard User.

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY', @testdata_id = @testdata_id;

--Result Set 4

EXEC [simsig].[USp_GET_TVERSION] @id = @id2, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check returning all record for a standard user omits dev versions

--Result Set 5

EXEC [simsig].[USp_GET_TVERSION] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;

--Check Debugging

SET @debug = 1;

--Result Set 6

EXEC [simsig].[USp_GET_TVERSION] @id = 0, @debug = @debug, @debug_session_id = @debug_session_id OUTPUT;
</value>
  </data>
  <data name="simsig_USp_GET_TVERSIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>-- Get TestData ID;

DECLARE @testdata_id UNIQUEIDENTIFIER;
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_GET_TVERSIONTest', @testdata_id = @testdata_id OUTPUT;

--Teardown Records

DELETE FROM [simsig].[TVERSION]
WHERE
	[testdata_id] = @testdata_id;</value>
  </data>
  <data name="simsig_USp_UPSERT_TLOCATIONTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>--Teardown Data

DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TLOCATIONTest', @testdata_id = @testdata_id OUTPUT;

--Delete records

DELETE FROM [simsig].[TSIMERA]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TLOCATION]
WHERE
	[testdata_id] = @testdata_id;

DELETE FROM [simsig].[TSIM]
WHERE
	[testdata_id] = @testdata_id;
</value>
  </data>
  <data name="simsig_USp_UPSERT_TLOCATIONTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for simsig.USp_UPSERT_TLOCATION
DECLARE @id AS SMALLINT, @sim_id AS SMALLINT, @tiploc AS NVARCHAR (16), @name AS NVARCHAR (64), @simsig_code AS NVARCHAR (16), @simsig_entry_point AS BIT, @datetime AS DATETIMEOFFSET (7), @debug AS BIT, @debug_session_id AS UNIQUEIDENTIFIER;

--Other Variables

DECLARE @error_message NVARCHAR(248) = N' No Error Raised';
DECLARE @testdata_id UNIQUEIDENTIFIER;

--Get TestData ID 
EXEC [test].[Usp_REGISTER_TESTDATA] @key = 'simsig_USp_UPSERT_TLOCATIONTest', @testdata_id = @testdata_id OUTPUT;

--Check 1 -- Check not logged in raises error

SELECT @tiploc = NULL,
       @name = N'Test Upsert Location Name 1',
       @simsig_code = N'TUPSERTLOC1',
       @simsig_entry_point = 1,
       @datetime = NULL,
       @debug = 0;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 1

SELECT
	[error_message] = @error_message;

--Check 2 -- Check Standard User raises error

--Log Standard User In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'teststandarduserAPIKEY', @testdata_id = @testdata_id

SET @error_message = N' No Error Raised';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 2

SELECT
	[error_message] = @error_message;

--Check 3 -- Check Invalid Name Errors

--Log Editor In

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SET @error_message = N' No Error Raised';
SET @name = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 3 (Check Empty String)

SELECT
	[error_message] = @error_message;

SET @error_message = N' No Error Raised';
SET @name = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 4 (Check &lt;NULL&gt;)

SELECT
	[error_message] = @error_message;

--Check 4 -- Check Invalid SimSig Code Errors

SET @error_message = N' No Error Raised';
SET @name = N'Test Upsert Location Name 1';
SET @simsig_code = '';

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 5 (Check Empty String)

SELECT
	[error_message] = @error_message;

SET @error_message = N' No Error Raised';
SET @simsig_code = NULL;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 6 (Check &lt;NULL&gt;)

SELECT
	[error_message] = @error_message;

--Check 5 -- Check NULL Entry point flag Errors

SET @error_message = N' No Error Raised';
SET @name = N'Test Upsert Location Name 1';
SET @simsig_code = 'TUPSERTLOC1';
SET @simsig_entry_point = NULL

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 7

SELECT
	[error_message] = @error_message;

--Check 6 -- Check Invalid Sim ID Errors

SET @error_message = N' No Error Raised';
SET @simsig_entry_point = 0
SET @sim_id = -1;

BEGIN TRY
	EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;
END TRY 
BEGIN CATCH
	SELECT @error_message = ERROR_MESSAGE();
END CATCH

--Result Set 8

SELECT
	[error_message] = @error_message;

--Check 8 Check Record Creates Correctly

SET @error_message = N' No Error Raised';
SET @simsig_entry_point = 0
SET @sim_id = 0;

--Log Admin In (this will check this role works ok going forward).

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testadminuserAPIKEY', @testdata_id = @testdata_id;

--Create Sim

EXEC [simsig].[Usp_UPSERT_TSIM] @id = @sim_id OUTPUT, @name = N'Test Upsert Location Sim Name 1', @description = N'Test Upsert Location Sim Desc 1', @simsig_wiki_link = NULL, @simsig_code = 'Test Uplocation Location Code 1', @datetime = NULL;

--Create Location

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 9

SELECT
	[sim_id] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[createdby_app_id],
	[createdon] = CAST(CASE WHEN [createdon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id],
	[modifiedby_app_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] IS NOT NULL THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TLOCATION]
WHERE
	[id] = @id;

--Check 9 Updating ID change record

--Log Editor back in

EXEC [common].[Usp_SET_SESSIONCONTEXT] @app_api_key = N'testappAPIKEY', @app_user_api_key = N'testuserAPIKEY', @testdata_id = @testdata_id

SELECT @tiploc = 'TIPLOC2',
       @name = N'Test Upsert Location Name 2',
       @simsig_code = N'TUPSERTLOC2',
       @simsig_entry_point = 1,
       @datetime = SYSDATETIMEOFFSET(),
       @debug = 0;

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 10

SELECT
	[sim_id] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[createdby_app_id],
	[createdon] = CAST(CASE WHEN [createdon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id],
	[modifiedby_app_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = @datetime THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TLOCATION]
WHERE
	[id] = @id;

--Check 10 Updating Name change record

DECLARE @existing_id SMALLINT = @id;
SET @id = 0;

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 11

SELECT
	[same_id_flag] = CAST(CASE WHEN @id = @existing_id THEN 1 ELSE 0 END AS BIT);

--Check 11 Check Debug

SELECT @tiploc = NULL,
       @name = N'Test Upsert Location Name 3',
       @simsig_code = N'TUPSERTLOC3',
       @simsig_entry_point = 1,
       @datetime = NULL,
       @debug = 1;

EXEC [simsig].[USp_UPSERT_TLOCATION] @id OUTPUT, @sim_id, @tiploc, @name, @simsig_code, @simsig_entry_point, @datetime, @debug, @debug_session_id OUTPUT;

--Result Set 12

SELECT
	[sim_id] = CAST(CASE WHEN [sim_id] = @sim_id THEN 1 ELSE 0 END AS BIT),
	[tiploc],
	[name],
	[simsig_code],
	[simsig_entry_point],
	[testdata_id] = CAST(CASE WHEN [testdata_id] = @testdata_id THEN 1 ELSE 0 END AS BIT),
	[createdby_id],
	[createdby_app_id],
	[createdon] = CAST(CASE WHEN [createdon] IS NOT NULL THEN 1 ELSE 0 END AS BIT),
	[modifiedby_id],
	[modifiedby_app_id],
	[modifiedon] = CAST(CASE WHEN [modifiedon] = @datetime THEN 1 ELSE 0 END AS BIT)
FROM [simsig].[TLOCATION]
WHERE
	[id] = @id;

--Result Set 13

SELECT
	*
FROM [audit].[TEVENT]
WHERE
	[debug_session_id] = @debug_session_id</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>